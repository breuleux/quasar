
require:
   "./proxy" ->
      proxy
   .directory ->
      Directory
   .tracks ->
      Tracks, Patch
   .util ->
      fields
   .cache ->
      Frame, with-frame
   events ->
      EventEmitter

provide:
   State
   DependentState
   transact-all
   Function



class EE < EventEmitter:
   constructor{@_self = null} =
      EventEmitter.constructor.call{@}
   eager-async emit{event, *args} =
      @listeners{event} each listener ->
         await listener.apply{@_self, args}



;;;;;;;;;;;
;; State ;;
;;;;;;;;;;;

class State:

   constructor{@origin, @options = {=}} =
      @options as {
         clobber-patch => @clobber-patch = false
         input-self => @input-self = false
         commit-policy => @commit-policy = .transact
      }
      @emitter = new EE{}
      @emitter.on{.new-listener} with {match event, listener} ->
         .state -> listener{@model{}}
         else -> pass

      @ntrans = 0
      @patch = Patch{}

      @dir = Directory{clobber-patch = @clobber-patch}
      @dir[fields.associated-state] = [@]
      @basis = @dir.acquire{@origin}
      @basis-proxy = proxy{@basis, null, @patch}
      @patch.shift{}

      @outstanding-commit = false

      State.all.push{@}

   on{event, listener} =
      @emitter.on{event, listener}

   sync{listener} =
      @on{.state, listener}

   get{} =
      @basis

   self{} =
      if @input-self:
         @basis
      else:
         @

   model{v = null} =
      if v === null:
         @basis-proxy
      else:
         proxy{v, null, @patch}

   eager-async commit{} =
      if @ntrans > 0 or @committing:
         @outstanding-commit = true
         false
      else:
         @committing = true
         patch = Patch{@patch.shift{}}
         @dir.patch{patch}
         await @emitter.emit{.commit, @model{}, patch}
         await @emitter.emit{.state, @model{}, patch}
         @outstanding-commit and @committing = false
         true

   eager-async transact{fn} =
      @ntrans += 1
      await fn{@model{}}
      @ntrans -= 1
      if @ntrans === 0 and [@commit-policy === .transact or @outstanding-commit]:
         @commit{}
      else:
         @emitter.emit{.transact, @}

State.all = {}

var is-transaction = false

transact-all{fn} =
   throw E.do-not-use{}
   commit = not is-transaction
   is-transaction = true
   try:
      fn{}
      if commit:
         State.all each state ->
            state.commit{}
   finally:
      if commit:
         is-transaction = false



;;;;;;;;;;;;;;
;; Function ;;
;;;;;;;;;;;;;;

class Function:

   constructor{@input, @render, @options = {=}} =
      @emitter = EE{}
      @emitter.on{.new-listener} with {match event, listener} ->
         .value -> eager-async: listener{await @value}
         else -> pass
      @options as {
         clobber-patch => @clobber-patch = true
      }
      @dir = Directory{clobber-patch = @clobber-patch}
      @dir[fields.associated-state] = [@]
      @redo = true
      @input.sync{@recompute.bind{@}}

   eager-async compute{patch = null} =
      if not @redo and @_previous-input !== @input.get{}:
         @redo = true
      @_previous-input = @input.get{}
      @basis =
         await with-frame{Frame{Tracks{}, context}, fn} where
            context = {
               state = @input
               patch = patch
               dir = @input.dir
               out-patch = @patch
               out-dir = @dir
               root = true
            }
            eager-async fn{} =
               if @redo:
                  @redo = false
                  await @render.rend.call{null, @input.model{}}
               else:
                  @basis = await @basis.update{}
                  @basis
      @dir.acquire{@basis.value}

   eager-async recompute{model, patch} =
      @value = @compute{patch}
      try:
         @error = null
         await @emitter.emit{.value, await @value}
      catch e:
         @error = e

   get{} =
      if @error:
         throw @error
      @value

   sync{fn} =
      @emitter.on{.value, fn}




;;;;;;;;;;;;;;;;;;;;
;; DependentState ;;
;;;;;;;;;;;;;;;;;;;;

class DependentState < State:

   constructor{@input, @render, @options = {=}} =

      @options as {
         clobber-patch => @clobber-patch = true
         action => @action = {x} -> x ;; TODO: do something with this, or remove it
         input-self => @input-self = false
      }

      @listeners = {}
      ;; @direct-tracks = Tracks{Chirurgies}

      @patch-stack = {}
      @patch = Patch{}

      @dir = Directory{clobber-patch = @clobber-patch}
      @dir[fields.associated-state] = [@]

      @redo = true
      @resolved = @compute{}

      ;; @input.add-listener{@listen.bind{@}}
      @input.on{.commit, @listen.bind{@}}

      State.all.push{@}

   compute{patch = null} =
      if not @redo and @_previous-input !== @input.get{}:
         @redo = true
      @_previous-input = @input.get{}
      @basis =
         with-frame{Frame{Tracks{}, context}, fn} where
            context = {
               state = @input
               patch = patch
               dir = @input.dir
               out-patch = @patch
               out-dir = @dir
               root = true
            }
            fn{} =
               if @redo:
                  @redo = false
                  @render.rend.call{null, @input.model{}}
               else:
                  @basis = @basis.update{}
                  @basis
      ;; @basis.value = @dir.acquire{@basis.value}

   get{} =
      @basis.value

   self{} =
      if @input-self:
         @basis.value
      else:
         @

   model{v = @basis.value} =
      proxy{v, null, @patch}

   listen{model, patch} =
      @compute{patch}
      @commit{}

