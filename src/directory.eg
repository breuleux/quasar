
require:
   .object-fill
   .array-fill
   .misc-fill
   .util ->
      identify, fork-identify, tuck
      next-id, ID, FORKID, DIRECTORY
      fields, methods
      longest-run
   .proxy ->
      deprox
   .iter ->
      ;; iterate-properties
      remap-properties
   kaiser ->
      get-handler
      maybe-handler
      default-serializer as kser
   "./clobber" -> clobber


provide:
   Directory


SIZE = Symbol{.size}

class Directory:

   constructor{@options = {=}} =
      ;; Tie @duplicate to @clobber-patch by default, since they should
      ;; usually have the same value.
      @options as {
         clobber-patch => @clobber-patch = false
         duplicate => @duplicate = @clobber-patch
         assimilate => @assimilate = false
      }
      @dir = {=}
      @version = 1

   ;;;;;;;;;;;;;
   ;; GETTERS ;;
   ;;;;;;;;;;;;;

   get-all{id} =
      match @dir[id]:
         undefined? -> {}
         {_, v} -> {v}
         objs -> items{objs} each {k, v} -> v

   get{id} =
      @get-all{id}[0]

   get-canon{v} =
      v and v[ID] and @get{v[ID]} or v

   ;;;;;;;;;;;;;;;;;
   ;; LIST/UNLIST ;;
   ;;;;;;;;;;;;;;;;;

   list{deprox! value} =
      id = value[ID]
      if @duplicate:
         sub = [@dir[id] or= {SIZE => 0}]
         sub[value[FORKID]] = value
         sub[SIZE] += 1
         if sub[SIZE] === 1:
            maybe-handler{value}??.enter??{value, @}
            ;; value[methods.enter]??{@}
      else:
         @dir[id] =
            match @dir[id]:
               undefined? ->
                  maybe-handler{value}??.enter??{value, @}
                  ;; value[methods.enter]??{@}
                  {1, value}
               {count, value} ->
                  {count + 1, value}

   unlist{deprox! value} =
      id = value[ID]
      if @duplicate:
         sub = @dir[id]
         delete sub[value[FORKID]]
         sub[SIZE] -= 1
         if sub[SIZE] === 0:
            maybe-handler{value}??.exit??{value, @}
            ;; value[methods.exit]??{@}
      else:
         {count, _} = @dir[id]
         match count:
            > 1 ->
               @dir[id] = {count - 1, value}
               return value
            else ->
               delete @dir[id]
               delete value[DIRECTORY]
               maybe-handler{value}??.exit??{value, @}
               ;; value[methods.exit]??{@}

   ;;;;;;;;;;;;;;;;
   ;; ENTER/EXIT ;;
   ;;;;;;;;;;;;;;;;

   enter{deprox! match v} =
      null? or undefined? or Number? or String? or Symbol? or Boolean? ->
         v
      else ->
         x = @get-canon{v}
         var enter-children = true
         value = match x:
            when @duplicate ->
               @fork{x}
            {^DIRECTORY => match} ->
               === [@] ->
                  enter-children = false; x
               else ->
                  @fork{x}
            when @assimilate ->
               identify{x}
               x
            else ->
               @fork{x}

         tuck{value, DIRECTORY, @}
         fork-identify{value}
         @list{value}
         if enter-children:
            remap-properties{value} with {k, v2} ->
               @enter{v2}

            ;; h = get-handler{value}
            ;; var changes = false
            ;; s = kser.to-object{value, false}.data
            ;; items{s} each {k, v2} ->
            ;;    newv = @enter{v2}
            ;;    if newv !== v2:
            ;;       changes = true
            ;;       s[k] = newv
            ;; if changes:
            ;;    h.fill{value, s}

            ;; iterate-properties{value} each
            ;;    {k, v2, setter} ->
            ;;       newv = @enter{v2}
            ;;       if newv !== v2:
            ;;          setter{newv}
         value

   exit{deprox! match v} =
      null? or undefined? or Number? or String? or Symbol? or Boolean? ->
         v
      else ->
         @unlist{v}
         remap-properties{v} with {k, v2} ->
            @exit{v2}
            v2

         ;; iterate-properties{v} each
         ;;    {k, v2, setter} ->
         ;;       @exit{v2}

   ;;;;;;;;;;;;;
   ;; ACQUIRE ;;
   ;;;;;;;;;;;;;

   acquire{v} =
      @enter{v}

   ;;;;;;;;;;
   ;; FORK ;;
   ;;;;;;;;;;

   fork{match value} =
      null? or undefined? ->
         value
      do:
         identify{value}
      else ->
         ;; rval = deprox{value}[methods.fork]{@}
         try:
            rval = kaiser.shallow-copy{deprox{value}}
         catch E.kaiser? e:
            return deprox{value}
         {ID, fields.cache} each field ->
            tuck{rval, field, value[field]}
         fork-identify{rval}
         rval

   ;; clobber{match value, new-value} =
   ;;    null? or undefined? ->
   ;;       new-value
   ;;    do:
   ;;       identify! value
   ;;       identify! new-value
   ;;    when value[ID] and value[ID] === new-value[ID] ->
   ;;       value
   ;;    else ->
   ;;       deprox{value}[methods.clobber]{new-value, @}

   clobber{match value, new-value} =
      null? or undefined? ->
         new-value
      do:
         identify! value
         identify! new-value
      when value[ID] and value[ID] === new-value[ID] ->
         value
      else ->
         clobber{value, new-value, @}

   replace{old-value, new-value, try-clobber = true} =
      if @clobber-patch and try-clobber:
         @clobber{old-value, @get-canon{new-value}}
      else:
         v = @acquire{new-value}
         @exit{old-value}
         v

   patch{p} =
      ;; TODO: investigate what happens when a patch introduces an
      ;; item with, say, ID == x, which needs to be patched, but the
      ;; patch for ID == x was applied before. This should be ok if
      ;; the item is already in the directory, otherwise it may fail.
      @version += 1
      p.list{} each {id, obj-patch} ->
         @get-all{id} each obj ->
            patch-shallow{obj, p, @}

   ;; [^methods.fork]{dir} =
   ;;    throw E.fork{"Cannot fork directories."}
   ;; [^methods.proxy]{tracks, patch} =
   ;;    throw E.proxy{"Cannot proxy directories."}
   ;; [^methods.patch]{p, dir} =
   ;;    throw E.patch{"Cannot patch directories."}
   ;; [^methods.clobber]{new, dir} =
   ;;    throw E.clobber{"Cannot clobber directories."}
   ;; [^methods.iterate-properties]{} =
   ;;    throw E.iterate{"Cannot iterate directories."}


;;;;;;;;;;;;;;;;;;;
;; PATCH HELPERS ;;
;;;;;;;;;;;;;;;;;;;

patch-shallow{value and get-handler! h, patch, dir} =
   x = kser.to-object{value, false}
   p = patch.get-for{value}
   clone! o = x.data
   var changes = false

   match o:

      Array? ->
         splices = p["@splice"]
         if not splices:
            return
         changes = true
         enumerate{splices}.reverse{} each {i, match} ->
            {n, repl} ->
               previous = o.splice{i, n}
               var acq =
                  zip{repl.slice{0, previous.length}, previous} each
                     {new-value, old-value} ->
                        dir.replace{old-value, new-value}
               acq ++= repl.slice{previous.length} each
                  new-value ->
                     dir.acquire{new-value}
               previous.slice{repl.length} each oldv ->
                  dir.exit{oldv}
               o.splice{i, 0, *acq}
            else ->
               pass

      Object? ->
         items{p} each {k, match instruction} ->
            do: changes = true
            #delete{} ->
               dir.exit{o[k]}
               delete o[k]
            #update{new-value} ->
               o[k] =
                  if Object.has-own-property{o, k}:
                     dir.replace{o[k], new-value}
                  else:
                     dir.enter{new-value}
            else ->
               throw E.quasar.patch{'Unknown patch instruction: {instruction}'}

   if changes:
      h.fill{value, o}

   ;; {patch => fn} ->
   ;;    pass
   ;; else ->
   ;;    throw E.quasar.patch{'Cannot patch {value}'}


;; patch-shallow{value and get-handler! match h, patch, dir} =
;;    {patch => fn} ->
;;       fn{value, p, dir}
;;    else ->
;;       throw E.quasar.patch{'Cannot patch {value}'}

