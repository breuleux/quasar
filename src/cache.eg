

require:
   .directory ->
      Directory
   "./proxy" ->
      proxy, deprox, reprox
   .relevant ->
      intersect
   .iter ->
      iterate-properties
   .util ->
      identify, fork-identify, tuck
      next-id, fields, methods
      ID, FORKID
   "./root" ->
      Root
   "./tracks" ->
      Tracks, Counter, Chirurgies, Patch

provide:
   arg-key, args-key
   cached-function
   opaque-cached-function
   State, DependentState
   transact-all


;;;;;;;;;;;;;;
;; arg-keys ;;
;;;;;;;;;;;;;;

arg-key{match x} =
   ;; Translate some argument x to a string key.
   String? ->
      "S" + x
   null? or undefined? or Number? or Boolean? ->
      "P" + String{x}
   {^fields.not-inspectable => true?} and identify! and fork-identify! ->
      "O" + String{x[ID]} + ":" + String{x[FORKID]}
   deprox! [x and {^ID => Number?}] ->
      fork-identify{x}
      "O" + String{x[ID]} + ":" + String{x[FORKID]}
   else ->
      '\x03{xs.join{"\x01"}}\x04' where
         xs = items{x} each {k, v} ->
            '{k}\x02{arg-key{v}}'

args-key{args} =
   ;; Translate a list of arguments to a string key.
   args.map{arg-key}.join{"\x00"}

get-replacement{match cached} =
   {=> replacement} ->
      get-replacement{replacement}
   else ->
      cached




;;;;;;;;;;;;
;; Opaque ;;
;;;;;;;;;;;;

opaque = Symbol{"opaque"}
contents = Symbol{"contents"}

extract-opaque{match x} =
   Opaque? -> x[contents]
   else -> x

class Opaque:
   constructor{match value} =
      String? or Number? or Boolean? or Symbol? or null? or undefined? ->
         throw E.opaque{'Opaque function cannot return a primitive value like \'{value}\''}
      {^opaque => true?} ->
         throw E.opaque{'Opaque function must own the values it returns. You cannot return the result of another opaque call.'}
      else ->
         value[opaque] = [@]
         @[contents] = value
   [^methods.iterate-properties]{} =
      {{contents, @[contents], new-c -> @[contents] = new-c}}
   [^methods.fork]{dir} =
      Opaque{@[contents]}


;;;;;;;;;;;;;;;;;;
;; CachedResult ;;
;;;;;;;;;;;;;;;;;;

class CachedResult:

   constructor{@reactor, @self, @args, @value, @tracks, @version} =
      pass

   update{} =
      current-context{} as {
         => patch
         => out-patch
         dir => let dir and {=> version}
      }
      if not patch:
         return [@]
      match version:
         == @version or when not @version ->
            @
         when @tracks and intersect{@tracks, patch, dir} ->
            rval and @replacement = @reactor.render{@self, @args, true}
            rval
         else ->
            @


frame-stack = {}

current-frame{} =
   frame-stack[frame-stack.length - 1]

current-context{} =
   current-frame{}??.context

with-frame{frame, fn} =
   frame-stack.push{frame}
   res = fn{}
   frame-stack.pop{}
   res

class Frame:
   constructor{@tracks, context = {=}} =
      prev = [current-context{} or {=}]
      @context = [prev & {root = false}] & context


_reprox{match x, deps} =
   {^ID => Number?} or null? or undefined? or {^fields.not-inspectable => true?} ->
      reprox{x, deps, null}
   Array? ->
      x each y -> _reprox{y, deps}
   else ->
      rval = Object.create{Object.get-prototype-of{x}}
      items{x} each {k, v} ->
         rval[k] = _reprox{v, deps}
      rval


class Reactor:

   constructor{@renderfn} =
      @argmap = {=}

   render{the-self, args, force = false} =
      key = args-key{{the-self} ++ args}
      cached =
         match @argmap[key]:
            undefined? or when force ->
               @render-cache-object{the-self, args}
            cached ->
               c = get-replacement{cached}
               c.update{}
      @argmap[key] = cached
      parent = current-frame{}
      current-context{} as {=> merge-opaque = true}
      if merge-opaque or not [Opaque? cached.value]:
         parent??.tracks.merge{cached.tracks}
      cached

   render-cache-object{the-self, args} =
      tracks = Tracks{}
      pargs = args each arg -> _reprox{arg, tracks}
      pself = reprox{the-self, tracks, null}
      current-context{} as {
         dir => {=> version = null}
         => out-dir
      }

      var res = with-frame{Frame{tracks}} with ->
         identify{@renderfn.apply{pself, pargs}}

      res = out-dir.acquire{res}

      cached = CachedResult{@, the-self, args, res, tracks, version}
      cached



;;;;;;;;;;;
;; State ;;
;;;;;;;;;;;

class State:

   constructor{@origin, @options = {=}} =
      {clobber-patch => @clobber-patch = false} = @options
      @listeners = {}

      @patch-stack = {}
      @patch = Patch{}

      @dir = Directory{clobber-patch = @clobber-patch}
      @dir[fields.associated-state] = [@]
      ;; @basis = @dir.acquire-copy{@origin}
      @basis = @dir.acquire{@origin}
      @basis-proxy = proxy{@basis, null, @patch}
      @patch.shift{}

      State.all.push{@}

   add-listener{listener} =
      @listeners.push with listener

   get{} =
      @basis

   model{v = null} =
      if v === null:
         @basis-proxy
      else:
         proxy{v, null, @patch}

   commit{} =
      patch = Patch{@patch.shift{}}
      @dir.patch{patch}
      @listeners each listener ->
         listener.call{@, @model{}, patch}
      true

   transact{fn} =
      fn{@model{}}
      @commit{}

State.all = {}

var is-transaction = false

transact-all{fn} =
   commit = not is-transaction
   is-transaction = true
   try:
      fn{}
      if commit:
         State.all each state ->
            state.commit{}
   finally:
      if commit:
         is-transaction = false



;;;;;;;;;;;;;;;;;;;;
;; DependentState ;;
;;;;;;;;;;;;;;;;;;;;

class DependentState < State:

   constructor{@input, @render, @options = {=}} =

      @options as {
         clobber-patch => @clobber-patch = true
         action => @action = {x} -> x
      }
      @listeners = {}
      @direct-tracks = Tracks{Chirurgies}

      @patch-stack = {}
      @patch = Patch{}

      @dir = Directory{clobber-patch = @clobber-patch}
      @dir[fields.associated-state] = [@]

      @redo = true
      @compute{}

      @input.add-listener{@listen.bind{@}}

      State.all.push{@}

   ;; walk{v} =
   ;;    iterate-properties{v} each
   ;;       {k, match obj, setter} ->
   ;;          match Opaque? opq ->
   ;;             do:
   ;;                gen-patch{@patch, extract-opaque{opq}}
   ;;             {^fields.cache => cache} when cache ->
   ;;                @direct-tracks.merge{cache.tracks, .merge-one} with
   ;;                   {'{v[ID]}\x00{k}', {v, k, gen-patch, cache}}
   ;;                @walk{obj}
   ;;             else ->
   ;;                @walk{obj}
   ;;          else ->
   ;;             @walk{obj}

   compute{patch = null} =
      if not @redo and @_previous-input !== @input.get{}:
         @redo = true
      @_previous-input = @input.get{}
      @basis =
         with-frame{Frame{Tracks{}, context}, fn} where
            context = {
               state = @input
               patch = patch
               dir = @input.dir
               out-patch = @patch
               out-dir = @dir
               root = true
            }
            fn{} =
               if @redo:
                  @redo = false
                  @render.rend.call{null, @input.model{}}
               else:
                  @basis = @basis.update{}
                  @basis
      ;; @basis.value = @dir.acquire{@basis.value}

   get{} =
      match @basis.value:
         Opaque? x -> x[contents]
         v -> v

   model{v = @basis.value} =
      proxy{v, null, @patch}

   listen{model, patch} =
      @compute{patch}
      @commit{}


;;;;;;;;;;;;;;;;;;;;;
;; cached-function ;;
;;;;;;;;;;;;;;;;;;;;;

cached-function{render} =
   r = Reactor{render}
   method mkcache{args} =
      r.render{[@] or current-context{}.state, args}
   rval{*args} = mkcache{args}.value
   rval.orig = render
   rval.reactor = r
   rval.rend{*args} = mkcache{args}
   rval

opaque-cached-function{render} =
   method render2{*args} =
      Opaque with render.apply{@, args}
   cached-function{render2}


