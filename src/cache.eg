
require:
   .directory ->
      Directory
   "./proxy" ->
      proxy, deprox, reprox
   .relevant ->
      intersect
   .iter ->
      iterate-properties
   .util ->
      identify, fork-identify, tuck
      next-id, fields, methods
      ID, FORKID
   "./root" ->
      Root
   "./tracks" ->
      Tracks, Counter, Chirurgies, Patch

provide:
   arg-key, args-key
   cached-function
   Frame, with-frame


;;;;;;;;;;;;;;
;; arg-keys ;;
;;;;;;;;;;;;;;

arg-key{match x} =
   ;; Translate some argument x to a string key.
   String? ->
      "S" + x
   null? or undefined? or Number? or Boolean? ->
      "P" + String{x}
   {^fields.not-inspectable => true?} and identify! and fork-identify! ->
      "O" + String{x[ID]} + ":" + String{x[FORKID]}
   deprox! [x and {^ID => Number?}] ->
      fork-identify{x}
      "O" + String{x[ID]} + ":" + String{x[FORKID]}
   else ->
      '\x03{xs.join{"\x01"}}\x04' where
         xs = items{x} each {k, v} ->
            '{k}\x02{arg-key{v}}'

args-key{args} =
   ;; Translate a list of arguments to a string key.
   args.map{arg-key}.join{"\x00"}

get-replacement{match cached} =
   {=> replacement} ->
      get-replacement{replacement}
   else ->
      cached




;;;;;;;;;;;;;;;;;;
;; CachedResult ;;
;;;;;;;;;;;;;;;;;;

class CachedResult:

   constructor{@reactor, @self, @args, @value, @tracks, @version} =
      pass

   update{} =
      current-context{} as {
         => patch
         => out-patch
         dir => let dir and {=> version}
      }
      if not patch:
         return [@]
      match version:
         == @version or when not @version ->
            @
         when @tracks and intersect{@tracks, patch, dir} ->
            rval and @replacement = @reactor.render{@self, @args, true}
            rval
         else ->
            @


frame-stack = {}

current-frame{} =
   frame-stack[frame-stack.length - 1]

current-context{} =
   current-frame{}??.context

with-frame{frame, fn} =
   frame-stack.push{frame}
   res = fn{}
   frame-stack.pop{}
   res

class Frame:
   constructor{@tracks, context = {=}} =
      prev = [current-context{} or {=}]
      @context = [prev & {root = false}] & context


_reprox{match x, deps} =
   {^ID => Number?} or null? or undefined? or {^fields.not-inspectable => true?} ->
      reprox{x, deps, null}
   Array? ->
      x each y -> _reprox{y, deps}
   else ->
      rval = Object.create{Object.get-prototype-of{x}}
      items{x} each {k, v} ->
         rval[k] = _reprox{v, deps}
      rval


class Reactor:

   constructor{@renderfn} =
      @argmap = {=}

   render{the-self, args, force = false} =
      key = args-key{{the-self} ++ args}
      cached =
         match @argmap[key]:
            undefined? or when force ->
               @render-cache-object{the-self, args}
            cached ->
               c = get-replacement{cached}
               c.update{}
      @argmap[key] = cached
      parent = current-frame{}
      parent??.tracks.merge{cached.tracks}
      cached

   render-cache-object{the-self, args} =
      tracks = Tracks{}
      pargs = args each arg -> _reprox{arg, tracks}
      pself = reprox{the-self, tracks, null}
      current-context{} as {
         dir => {=> version = null}
         => out-dir
      }

      var res = with-frame{Frame{tracks}} with ->
         identify{@renderfn.apply{pself, pargs}}

      res = out-dir.acquire{res}

      cached = CachedResult{@, the-self, args, res, tracks, version}
      cached


;;;;;;;;;;;;;;;;;;;;;
;; cached-function ;;
;;;;;;;;;;;;;;;;;;;;;

cached-function{render} =
   r = Reactor{render}
   method mkcache{args} =
      r.render{[@] or current-context{}.state, args}
   rval{*args} = mkcache{args}.value
   rval.orig = render
   rval.reactor = r
   rval.rend{*args} = mkcache{args}
   rval


